//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/Proto2/Input/NewProtoControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @NewProtoControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @NewProtoControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""NewProtoControls"",
    ""maps"": [
        {
            ""name"": ""Play"",
            ""id"": ""690faa1c-0d0d-4ec3-ac1d-e90b1301cfb6"",
            ""actions"": [
                {
                    ""name"": ""MainClick"",
                    ""type"": ""Value"",
                    ""id"": ""8f151a2d-a6f4-49ca-812f-2b24dfba14b6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""527898bc-9d13-46e4-9466-2894a59e6d09"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MainClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""64fb454f-5efc-4c78-ad84-ce5820008083"",
            ""actions"": [
                {
                    ""name"": ""Main Click"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b9b11e6a-10cb-4127-8ad6-fc0e715d1099"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ac8c1bf7-dc66-4418-bbf9-33ab279b4e7c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Main Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Play
        m_Play = asset.FindActionMap("Play", throwIfNotFound: true);
        m_Play_MainClick = m_Play.FindAction("MainClick", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_MainClick = m_UI.FindAction("Main Click", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Play
    private readonly InputActionMap m_Play;
    private List<IPlayActions> m_PlayActionsCallbackInterfaces = new List<IPlayActions>();
    private readonly InputAction m_Play_MainClick;
    public struct PlayActions
    {
        private @NewProtoControls m_Wrapper;
        public PlayActions(@NewProtoControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MainClick => m_Wrapper.m_Play_MainClick;
        public InputActionMap Get() { return m_Wrapper.m_Play; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayActions set) { return set.Get(); }
        public void AddCallbacks(IPlayActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayActionsCallbackInterfaces.Add(instance);
            @MainClick.started += instance.OnMainClick;
            @MainClick.performed += instance.OnMainClick;
            @MainClick.canceled += instance.OnMainClick;
        }

        private void UnregisterCallbacks(IPlayActions instance)
        {
            @MainClick.started -= instance.OnMainClick;
            @MainClick.performed -= instance.OnMainClick;
            @MainClick.canceled -= instance.OnMainClick;
        }

        public void RemoveCallbacks(IPlayActions instance)
        {
            if (m_Wrapper.m_PlayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayActions @Play => new PlayActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_MainClick;
    public struct UIActions
    {
        private @NewProtoControls m_Wrapper;
        public UIActions(@NewProtoControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MainClick => m_Wrapper.m_UI_MainClick;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @MainClick.started += instance.OnMainClick;
            @MainClick.performed += instance.OnMainClick;
            @MainClick.canceled += instance.OnMainClick;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @MainClick.started -= instance.OnMainClick;
            @MainClick.performed -= instance.OnMainClick;
            @MainClick.canceled -= instance.OnMainClick;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    public interface IPlayActions
    {
        void OnMainClick(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnMainClick(InputAction.CallbackContext context);
    }
}
